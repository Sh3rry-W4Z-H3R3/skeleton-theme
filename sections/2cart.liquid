{% comment %}
  This section is used in the cart template to render /cart page with an
  overview of the items in customer's cart.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/cart
{% endcomment %}

<div class="CartContainer full-width">
  <!-- Header Section -->
  <header class="CartHeader">
    <div class="HeaderContent">
      <h1 class="CartTitle">Your Shopping Cart</h1>
      <div class="CartCount">
        <span class="ItemCount">{{ cart.item_count }}</span> item{% if cart.item_count != 1 %}s{% endif %} in your cart
      </div>
    </div>
    <div class="ProgressIndicator">
      <div class="ProgressStep active">
        <div class="StepNumber">1</div>
        <span>Cart</span>
      </div>
      <div class="ProgressLine"></div>
      <div class="ProgressStep">
        <div class="StepNumber">2</div>
        <span>Checkout</span>
      </div>
      <div class="ProgressLine"></div>
      <div class="ProgressStep">
        <div class="StepNumber">3</div>
        <span>Payment</span>
      </div>
    </div>
  </header>

  <!-- Main Cart Content -->
  <main class="CartMain">
    <div class="CartContent">
      <!-- Cart Items Section -->
      <section class="CartItems">
        {% if cart.item_count > 0 %}
          {% for item in cart.items %}
            <div class="CartItem" data-line="{{ forloop.index }}">
              <div class="ItemImage">
                <img src="{{ item.image | img_url: '200x' }}" alt="{{ item.product.title }}">
                <div class="StockBadge">In Stock</div>
              </div>

              <div class="ItemDetails">
                <div class="ItemHeader">
                  <h3 class="ItemName">{{ item.product.title }}</h3>
                  <button class="RemoveButton" aria-label="Remove item" data-line="{{ forloop.index }}">
                    <i class="fas fa-times"></i>
                  </button>
                </div>

                <div class="ItemDescription">
                  {{ item.product.description | strip_html | truncatewords: 20 }}
                </div>

                <div class="ItemFeatures">
                  <span class="Feature">
                    <i class="fas fa-leaf"></i>
                    Handmade
                  </span>
                  <span class="Feature">
                    <i class="fas fa-shield-alt"></i>
                    Weather Resistant
                  </span>
                  <span class="Feature">
                    <i class="fas fa-truck"></i>
                    Free Delivery
                  </span>
                </div>

                <div class="ItemActions">
                  <div class="QuantityControls">
                    <label class="QuantityLabel">Quantity:</label>
                    <div class="QuantitySelector">
                      <button
                        class="QuantityButton decrease"
                        aria-label="Decrease quantity"
                        data-line="{{ forloop.index }}"
                      >
                        <i class="fas fa-minus"></i>
                      </button>
                      <input
                        type="number"
                        class="QuantityInput"
                        value="{{ item.quantity }}"
                        min="1"
                        data-line="{{ forloop.index }}"
                      >
                      <button
                        class="QuantityButton increase"
                        aria-label="Increase quantity"
                        data-line="{{ forloop.index }}"
                      >
                        <i class="fas fa-plus"></i>
                      </button>
                    </div>
                  </div>

                  <div class="ItemPrice">
                    <span class="PriceLabel">Price:</span>
                    <span class="Price">{{ item.price | money }}</span>
                  </div>
                </div>

                <div class="ItemTotal">
                  <span class="TotalLabel">Item Total:</span>
                  <span class="TotalPrice">{{ item.line_price | money }}</span>
                </div>
              </div>
            </div>
          {% endfor %}

          <!-- Continue Shopping Link -->
          <div class="ContinueShopping">
            <a href="/collections/all" class="ContinueLink">
              <i class="fas fa-arrow-left"></i>
              Continue Shopping
            </a>
          </div>
        {% else %}
          <div class="EmptyCart" style="text-align: center; padding: 3rem; color: var(--text-muted);">
            <i class="fas fa-shopping-cart" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
            <h3 style="margin-bottom: 1rem; color: var(--pakistani-green);">Your cart is empty</h3>
            <p style="margin-bottom: 2rem;">Discover our beautiful handmade rattan furniture collection</p>
            <a
              href="/collections/all"
              class="ContinueLink"
              style="display: inline-flex; align-items: center; gap: 0.5rem; color: var(--pakistani-green); text-decoration: none; font-weight: 600; padding: 1rem 2rem; border: 2px solid var(--pakistani-green); border-radius: 8px; transition: all 0.3s ease;"
            >
              <i class="fas fa-arrow-left"></i>
              Start Shopping
            </a>
          </div>
        {% endif %}
      </section>

      <!-- Cart Summary Section -->
      <aside class="CartSummary">
        <div class="SummaryCard">
          <h2 class="SummaryTitle">Order Summary</h2>

          <div class="SummaryDetails">
            <div class="SummaryRow">
              <span
                >Subtotal ({{ cart.item_count }} item{% if cart.item_count != 1 %}s{% endif %}):</span
              >
              <span>{{ cart.total_price | money }}</span>
            </div>
            <div class="SummaryRow">
              <span>Delivery:</span>
              <span class="FreeDelivery">FREE</span>
            </div>
            <div class="SummaryRow">
              <span>VAT (20%):</span>
              <span>{{ cart.total_price | times: 0.2 | money }}</span>
            </div>
            <div class="SummaryDivider"></div>
            <div class="SummaryRow total">
              <span>Total:</span>
              <span>{{ cart.total_price | times: 1.2 | money }}</span>
            </div>
          </div>

          <div class="PromoCode">
            <input type="text" class="PromoInput" placeholder="Enter promo code">
            <button class="PromoButton">Apply</button>
          </div>

          <button class="CheckoutButton" onclick="window.location.href=\''{{ routes.checkout_url }}\'';">
            <i class="fas fa-lock"></i>
            Secure Checkout
          </button>

          <div class="PaymentMethods">
            <span class="PaymentLabel">We accept:</span>
            <div class="PaymentIcons">
              <i class="fab fa-cc-visa"></i>
              <i class="fab fa-cc-mastercard"></i>
              <i class="fab fa-cc-paypal"></i>
              <i class="fab fa-apple-pay"></i>
            </div>
          </div>
        </div>

        <!-- Trust Elements -->
        <div class="TrustElements">
          <div class="TrustItem">
            <i class="fas fa-shield-alt"></i>
            <div>
              <strong>Secure Payment</strong>
              <p>Your payment information is encrypted and secure</p>
            </div>
          </div>

          <div class="TrustItem">
            <i class="fas fa-undo"></i>
            <div>
              <strong>Easy Returns</strong>
              <p>30-day return policy for your peace of mind</p>
            </div>
          </div>

          <div class="TrustItem">
            <i class="fas fa-truck"></i>
            <div>
              <strong>Free Delivery</strong>
              <p>Complimentary delivery on all orders over Â£500</p>
            </div>
          </div>

          <div class="TrustItem">
            <i class="fas fa-headset"></i>
            <div>
              <strong>Customer Support</strong>
              <p>Expert help available 7 days a week</p>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </main>

  <!-- Footer -->
  <footer class="CartFooter">
    <div class="FooterContent">
      <p>&copy; {{ 'now' | date: '%Y' }} Andra's Garden Heaven. Handcrafted with care in Glasgow.</p>
      <div class="FooterLinks">
        <a href="#">Privacy Policy</a>
        <a href="#">Terms of Service</a>
        <a href="#">Contact Us</a>
      </div>
    </div>
  </footer>
</div>

{% schema %}
{
  "name": "t:general.cart",
  "settings": []
}
{% endschema %}

<style>
  /* Reset and Base Styles */
  * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    scroll-behavior: smooth;
  }

  :root {
    /* Brand Colors from PRD */
    --pakistani-green: #1c4219;
    --french-grey: #d0ccd0;
    --white: #fbfcff;
    --cerulean: #1c6e8c;
    --black: #000000;

    /* Additional Colors */
    --light-green: #e8f5e8;
    --success-green: #28a745;
    --warning-orange: #ffa500;
    --error-red: #dc3545;
    --border-light: #e5e5e5;
    --text-muted: #6c757d;
    --shadow-light: rgba(0, 0, 0, 0.1);
    --shadow-medium: rgba(0, 0, 0, 0.15);

    /* Typography */
    --font-futura: 'Futura', 'Arial', sans-serif;
    --font-elgian: 'Elgian', 'Georgia', serif;

    /* Spacing */
    --spacing-xs: 0.5rem;
    --spacing-sm: 1rem;
    --spacing-md: 1.5rem;
    --spacing-lg: 2rem;
    --spacing-xl: 3rem;

    /* Border Radius */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;

    /* Transitions */
    --transition-fast: 0.2s ease;
    --transition-medium: 0.3s ease;
  }

  body {
    font-family: var(--font-elgian);
    background-color: var(--white);
    color: var(--black);
    line-height: 1.6;
    font-size: 16px;
  }

  /* Container */
  .CartContainer {
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--spacing-md);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  /* Header Styles */
  .CartHeader {
    margin-bottom: var(--spacing-xl);
    padding-bottom: var(--spacing-lg);
    border-bottom: 2px solid var(--border-light);
  }

  .HeaderContent {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
  }

  .CartTitle {
    font-family: var(--font-futura);
    font-size: 2.5rem;
    font-weight: 600;
    color: var(--pakistani-green);
    margin: 0;
    line-height: 1.3;
  }

  .CartCount {
    font-size: 1.1rem;
    color: var(--text-muted);
  }

  .ItemCount {
    font-weight: 600;
    color: var(--pakistani-green);
  }

  /* Progress Indicator */
  .ProgressIndicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-sm);
  }

  .ProgressStep {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
    opacity: 0.5;
    transition: var(--transition-medium);
  }

  .ProgressStep.active {
    opacity: 1;
  }

  .StepNumber {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--border-light);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-family: var(--font-futura);
    transition: var(--transition-medium);
  }

  .ProgressStep.active .StepNumber {
    background-color: var(--pakistani-green);
    color: var(--white);
  }

  .ProgressStep span {
    font-size: 0.9rem;
    font-weight: 500;
  }

  .ProgressLine {
    width: 60px;
    height: 2px;
    background-color: var(--border-light);
  }

  /* Main Content */
  .CartMain {
    flex: 1;
    margin-bottom: var(--spacing-xl);
  }

  .CartContent {
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: var(--spacing-xl);
  }

  /* Cart Items */
  .CartItems {
    background-color: var(--white);
  }

  .CartItem {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: var(--spacing-lg);
    padding: var(--spacing-lg);
    border: 1px solid var(--border-light);
    border-radius: var(--radius-lg);
    background-color: var(--white);
    box-shadow: 0 2px 8px var(--shadow-light);
    margin-bottom: var(--spacing-lg);
    transition: var(--transition-medium);
  }

  .CartItem:hover {
    box-shadow: 0 4px 16px var(--shadow-medium);
  }

  .ItemImage {
    position: relative;
    border-radius: var(--radius-md);
    overflow: hidden;
  }

  .ItemImage img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: var(--radius-md);
  }

  .StockBadge {
    position: absolute;
    top: var(--spacing-xs);
    right: var(--spacing-xs);
    background-color: var(--success-green);
    color: var(--white);
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    font-size: 0.8rem;
    font-weight: 600;
  }

  .ItemDetails {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .ItemHeader {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .ItemName {
    font-family: var(--font-futura);
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--pakistani-green);
    margin: 0;
    line-height: 1.3;
  }

  .RemoveButton {
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 1.2rem;
    cursor: pointer;
    padding: var(--spacing-xs);
    border-radius: var(--radius-sm);
    transition: var(--transition-fast);
  }

  .RemoveButton:hover {
    color: var(--error-red);
    background-color: rgba(220, 53, 69, 0.1);
  }

  .ItemDescription {
    color: var(--text-muted);
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .ItemFeatures {
    display: flex;
    gap: var(--spacing-md);
    flex-wrap: wrap;
  }

  .Feature {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.85rem;
    color: var(--pakistani-green);
    font-weight: 500;
  }

  .Feature i {
    font-size: 0.8rem;
  }

  .ItemActions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) 0;
    border-top: 1px solid var(--border-light);
    border-bottom: 1px solid var(--border-light);
  }

  .QuantityControls {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .QuantityLabel {
    font-weight: 600;
    color: var(--black);
  }

  .QuantitySelector {
    display: flex;
    align-items: center;
    border: 1px solid var(--border-light);
    border-radius: var(--radius-sm);
    overflow: hidden;
  }

  .QuantityButton {
    background-color: var(--white);
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    transition: var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
  }

  .QuantityButton:hover {
    background-color: var(--light-green);
    color: var(--pakistani-green);
  }

  .QuantityInput {
    border: none;
    width: 50px;
    text-align: center;
    padding: 0.5rem 0.25rem;
    font-size: 1rem;
    font-weight: 600;
  }

  .QuantityInput:focus {
    outline: none;
    background-color: var(--light-green);
  }

  .ItemPrice {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .PriceLabel {
    font-weight: 600;
    color: var(--black);
  }

  .Price {
    font-family: var(--font-futura);
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--pakistani-green);
  }

  .ItemTotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 600;
  }

  .TotalPrice {
    font-family: var(--font-futura);
    font-size: 1.3rem;
    color: var(--pakistani-green);
  }

  .ContinueShopping {
    margin-top: var(--spacing-lg);
  }

  .ContinueLink {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    color: var(--pakistani-green);
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition-fast);
  }

  .ContinueLink:hover {
    color: var(--cerulean);
    text-decoration: underline;
  }

  /* Cart Summary */
  .CartSummary {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-lg);
  }

  .SummaryCard {
    background-color: var(--white);
    border: 1px solid var(--border-light);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
    box-shadow: 0 2px 8px var(--shadow-light);
  }

  .SummaryTitle {
    font-family: var(--font-futura);
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--pakistani-green);
    margin-bottom: var(--spacing-md);
  }

  .SummaryDetails {
    margin-bottom: var(--spacing-lg);
  }

  .SummaryRow {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-xs) 0;
    font-size: 0.95rem;
  }

  .SummaryRow.total {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--pakistani-green);
    font-family: var(--font-futura);
  }

  .FreeDelivery {
    color: var(--success-green);
    font-weight: 600;
  }

  .SummaryDivider {
    height: 1px;
    background-color: var(--border-light);
    margin: var(--spacing-sm) 0;
  }

  .PromoCode {
    display: flex;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-lg);
  }

  .PromoInput {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid var(--border-light);
    border-radius: var(--radius-sm);
    font-size: 0.95rem;
  }

  .PromoInput:focus {
    outline: none;
    border-color: var(--pakistani-green);
    box-shadow: 0 0 0 2px rgba(28, 66, 25, 0.1);
  }

  .PromoButton {
    padding: 0.75rem 1rem;
    background-color: var(--pakistani-green);
    color: var(--white);
    border: none;
    border-radius: var(--radius-sm);
    font-weight: 600;
    cursor: pointer;
    transition: var(--transition-fast);
  }

  .PromoButton:hover {
    background-color: #0f2e0c;
  }

  .CheckoutButton {
    width: 100%;
    padding: 1rem;
    background-color: var(--pakistani-green);
    color: var(--white);
    border: none;
    border-radius: var(--radius-md);
    font-size: 1.1rem;
    font-weight: 600;
    font-family: var(--font-futura);
    cursor: pointer;
    transition: var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
  }

  .CheckoutButton:hover {
    background-color: #0f2e0c;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--shadow-medium);
  }

  .PaymentMethods {
    text-align: center;
  }

  .PaymentLabel {
    font-size: 0.9rem;
    color: var(--text-muted);
    display: block;
    margin-bottom: var(--spacing-xs);
  }

  .PaymentIcons {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
  }

  .PaymentIcons i {
    font-size: 1.5rem;
    color: var(--text-muted);
    transition: var(--transition-fast);
  }

  .PaymentIcons i:hover {
    color: var(--pakistani-green);
  }

  /* Trust Elements */
  .TrustElements {
    background-color: var(--light-green);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
  }

  .TrustItem {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
  }

  .TrustItem:last-child {
    margin-bottom: 0;
  }

  .TrustItem i {
    color: var(--pakistani-green);
    font-size: 1.2rem;
    margin-top: 0.2rem;
    flex-shrink: 0;
  }

  .TrustItem strong {
    display: block;
    font-weight: 600;
    color: var(--pakistani-green);
    margin-bottom: 0.25rem;
  }

  .TrustItem p {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin: 0;
    line-height: 1.4;
  }

  /* Footer */
  .CartFooter {
    border-top: 1px solid var(--border-light);
    padding-top: var(--spacing-lg);
    margin-top: auto;
  }

  .FooterContent {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9rem;
    color: var(--text-muted);
  }

  .FooterLinks {
    display: flex;
    gap: var(--spacing-md);
  }

  .FooterLinks a {
    color: var(--text-muted);
    text-decoration: none;
    transition: var(--transition-fast);
  }

  .FooterLinks a:hover {
    color: var(--pakistani-green);
    text-decoration: underline;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .CartContainer {
      padding: var(--spacing-sm);
    }

    .CartTitle {
      font-size: 2rem;
    }

    .HeaderContent {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-sm);
    }

    .ProgressIndicator {
      flex-wrap: wrap;
      gap: var(--spacing-xs);
    }

    .ProgressStep span {
      font-size: 0.8rem;
    }

    .CartContent {
      grid-template-columns: 1fr;
      gap: var(--spacing-lg);
    }

    .CartItem {
      grid-template-columns: 1fr;
      gap: var(--spacing-md);
    }

    .ItemImage {
      max-width: 300px;
      margin: 0 auto;
    }

    .ItemActions {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-sm);
    }

    .FooterContent {
      flex-direction: column;
      gap: var(--spacing-sm);
      text-align: center;
    }
  }

  @media (max-width: 480px) {
    .CartTitle {
      font-size: 1.5rem;
    }

    .ItemName {
      font-size: 1.2rem;
    }

    .QuantityControls {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-xs);
    }

    .PromoCode {
      flex-direction: column;
    }

    .TrustItem {
      flex-direction: column;
      text-align: center;
      gap: var(--spacing-xs);
    }
  }

  /* Animation Classes */
  .fade-in {
    animation: fadeIn 0.5s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .pulse {
    animation: pulse 0.3s ease-in-out;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }
</style>

<script>
  // Cart functionality and interactions
  class CartManager {
    constructor() {
      this.initializeEventListeners();
      this.updateCartDisplay();
    }

    initializeEventListeners() {
      // Quantity controls
      document.querySelectorAll('.QuantityButton.decrease').forEach((button) => {
        button.addEventListener('click', (e) => this.decreaseQuantity(e.target.dataset.line));
      });
      document.querySelectorAll('.QuantityButton.increase').forEach((button) => {
        button.addEventListener('click', (e) => this.increaseQuantity(e.target.dataset.line));
      });
      document.querySelectorAll('.QuantityInput').forEach((input) => {
        input.addEventListener('change', (e) => this.updateQuantity(e.target.value, e.target.dataset.line));
        input.addEventListener('input', (e) => this.validateQuantityInput(e));
      });

      // Remove item button
      document.querySelectorAll('.RemoveButton').forEach((button) => {
        button.addEventListener('click', (e) => this.removeItem(e.target.dataset.line));
      });

      // Promo code functionality
      const promoBtn = document.querySelector('.PromoButton');
      const promoInput = document.querySelector('.PromoInput');

      if (promoBtn) {
        promoBtn.addEventListener('click', () => this.applyPromoCode());
      }

      if (promoInput) {
        promoInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.applyPromoCode();
          }
        });
      }

      // Checkout button
      const checkoutBtn = document.querySelector('.CheckoutButton');
      if (checkoutBtn) {
        checkoutBtn.addEventListener('click', () => this.proceedToCheckout());
      }

      // Continue shopping link
      const continueLink = document.querySelector('.ContinueLink');
      if (continueLink) {
        continueLink.addEventListener('click', (e) => {
          e.preventDefault();
          this.continueShopping();
        });
      }

      // Add animation classes on load
      this.addLoadAnimations();
    }

    decreaseQuantity(line) {
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const currentValue = parseInt(quantityInput.value);

      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
        this.updateCartItem(line, quantityInput.value);
        this.addPulseAnimation(quantityInput);
      }
    }

    increaseQuantity(line) {
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const currentValue = parseInt(quantityInput.value);
      const maxValue = parseInt(quantityInput.max) || 10; // Assuming max 10 for demo

      if (currentValue < maxValue) {
        quantityInput.value = currentValue + 1;
        this.updateCartItem(line, quantityInput.value);
        this.addPulseAnimation(quantityInput);
      }
    }

    updateQuantity(value, line) {
      const quantity = parseInt(value);
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const minValue = parseInt(quantityInput.min) || 1;
      const maxValue = parseInt(quantityInput.max) || 10;

      if (quantity >= minValue && quantity <= maxValue) {
        this.updateCartItem(line, quantity);
      } else {
        // Reset to valid value
        quantityInput.value = Math.max(minValue, Math.min(maxValue, quantity));
        this.updateCartItem(line, quantityInput.value);
      }
    }

    validateQuantityInput(e) {
      // Only allow numbers
      const value = e.target.value;
      if (!/^\d*$/.test(value)) {
        e.target.value = value.replace(/\D/g, '');
      }
    }

    updateCartItem(line, quantity) {
      // This function would typically make an AJAX call to update the cart in Shopify
      // For this demo, we'll just update the display
      console.log(`Updating item ${line} to quantity ${quantity}`);

      // Simulate price update (replace with actual Liquid item.price and item.line_price)
      const itemElement = document.querySelector(`.CartItem[data-line="${line}"]`);
      if (itemElement) {
        const priceElement = itemElement.querySelector('.ItemPrice .Price');
        const totalElement = itemElement.querySelector('.ItemTotal .TotalPrice');

        // Assuming price is available in a data attribute or parsed from text
        const itemPriceText = priceElement.textContent.replace(/[^\d.]/g, '');
        const itemPrice = parseFloat(itemPriceText);

        const newLinePrice = itemPrice * quantity;
        totalElement.textContent = `Â£${newLinePrice.toFixed(2)}`;
      }
      this.updateCartCalculations();
    }

    updateCartCalculations() {
      // This function would typically get cart data from Shopify Liquid objects
      // For this demo, we'll sum up visible item totals
      let subtotal = 0;
      document.querySelectorAll('.CartItem').forEach((itemElement) => {
        const totalText = itemElement.querySelector('.ItemTotal .TotalPrice').textContent.replace(/[^\d.]/g, '');
        subtotal += parseFloat(totalText);
      });

      const vat = subtotal * 0.2; // 20% VAT
      let total = subtotal + vat;

      // Apply promo code if active (for demo purposes)
      const discountRow = document.querySelector('.SummaryRow.discount-row');
      if (discountRow) {
        const discountText = discountRow.querySelector('span:last-child').textContent.replace(/[^\d.]/g, '');
        total -= parseFloat(discountText);
      }

      // Update summary display
      const summaryRows = document.querySelectorAll('.SummaryRow');
      summaryRows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        if (text.includes('subtotal')) {
          row.querySelector('span:last-child').textContent = `Â£${subtotal.toFixed(2)}`;
        } else if (text.includes('vat')) {
          row.querySelector('span:last-child').textContent = `Â£${vat.toFixed(2)}`;
        } else if (text.includes('total')) {
          row.querySelector('span:last-child').textContent = `Â£${total.toFixed(2)}`;
        }
      });

      // Update cart count
      let totalItems = 0;
      document.querySelectorAll('.QuantityInput').forEach((input) => {
        totalItems += parseInt(input.value);
      });

      const cartCount = document.querySelector('.ItemCount');
      if (cartCount) {
        cartCount.textContent = totalItems;
      }

      const cartCountText = document.querySelector('.CartCount');
      if (cartCountText) {
        cartCountText.innerHTML = `<span class="ItemCount">${totalItems}</span> ${
          totalItems === 1 ? 'item' : 'items'
        } in your cart`;
      }
    }

    removeItem(line) {
      if (confirm('Are you sure you want to remove this item from your cart?')) {
        const cartItem = document.querySelector(`.CartItem[data-line="${line}"]`);
        if (cartItem) {
          cartItem.style.transition = 'all 0.3s ease';
          cartItem.style.transform = 'translateX(-100%)';
          cartItem.style.opacity = '0';

          setTimeout(() => {
            cartItem.remove();
            this.updateCartCalculations();
            if (document.querySelectorAll('.CartItem').length === 0) {
              this.showEmptyCart();
            }
          }, 300);
        }
      }
    }

    showEmptyCart() {
      const cartItems = document.querySelector('.CartItems');
      if (cartItems) {
        cartItems.innerHTML = `
                <div class="EmptyCart" style="text-align: center; padding: 3rem; color: var(--text-muted);">
                    <i class="fas fa-shopping-cart" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                    <h3 style="margin-bottom: 1rem; color: var(--pakistani-green);">Your cart is empty</h3>
                    <p style="margin-bottom: 2rem;">Discover our beautiful handmade rattan furniture collection</p>
                    <a href="/collections/all" class="ContinueLink" style="display: inline-flex; align-items: center; gap: 0.5rem; color: var(--pakistani-green); text-decoration: none; font-weight: 600; padding: 1rem 2rem; border: 2px solid var(--pakistani-green); border-radius: 8px; transition: all 0.3s ease;">
                        <i class="fas fa-arrow-left"></i>
                        Start Shopping
                    </a>
                </div>
            `;
      }

      // Update cart count
      const cartCount = document.querySelector('.ItemCount');
      if (cartCount) {
        cartCount.textContent = '0';
      }

      const cartCountText = document.querySelector('.CartCount');
      if (cartCountText) {
        cartCountText.innerHTML = ';<span class="ItemCount">0</span> items in your cart';
      }

      // Hide summary or show empty state
      const summaryCard = document.querySelector('.SummaryCard');
      if (summaryCard) {
        summaryCard.style.opacity = '0.5';
        summaryCard.style.pointerEvents = 'none';
      }
    }

    applyPromoCode() {
      const promoInput = document.querySelector('.PromoInput');
      const promoCode = promoInput.value.trim().toUpperCase();

      // Simulate promo code validation
      const validCodes = {
        WELCOME10: 0.1,
        SUMMER20: 0.2,
        GARDEN15: 0.15,
      };

      if (validCodes[promoCode]) {
        const discount = validCodes[promoCode];
        this.showPromoSuccess(promoCode, discount);
        this.applyDiscount(discount);
      } else if (promoCode) {
        this.showPromoError();
      }
    }

    showPromoSuccess(code, discount) {
      const promoCode = document.querySelector('.PromoCode');
      const successMessage = document.createElement('div');
      successMessage.className = 'PromoSuccess';
      successMessage.style.cssText = `
            background-color: var(--success-green);
            color: white;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            margin-top: 0.5rem;
            font-size: 0.9rem;
            text-align: center;
        `;
      successMessage.textContent = `${code} applied! ${Math.round(discount * 100)}% discount`;

      // Remove any existing messages
      const existingMessage = promoCode.querySelector('.PromoSuccess, .PromoError');
      if (existingMessage) {
        existingMessage.remove();
      }

      promoCode.appendChild(successMessage);

      // Remove message after 3 seconds
      setTimeout(() => {
        if (successMessage.parentNode) {
          successMessage.remove();
        }
      }, 3000);
    }

    showPromoError() {
      const promoCode = document.querySelector('.PromoCode');
      const errorMessage = document.createElement('div');
      errorMessage.className = 'PromoError';
      errorMessage.style.cssText = `
            background-color: var(--error-red);
            color: white;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            margin-top: 0.5rem;
            font-size: 0.9rem;
            text-align: center;
        `;
      errorMessage.textContent = 'Invalid promo code. Please try again.';

      // Remove any existing messages
      const existingMessage = promoCode.querySelector('.PromoSuccess, .PromoError');
      if (existingMessage) {
        existingMessage.remove();
      }

      promoCode.appendChild(errorMessage);

      // Remove message after 3 seconds
      setTimeout(() => {
        if (errorMessage.parentNode) {
          errorMessage.remove();
        }
      }, 3000);
    }

    applyDiscount(discountRate) {
      // This would integrate with the actual cart system
      // For demo purposes, we'll just show the discount in the summary
      const summaryDetails = document.querySelector('.SummaryDetails');

      // Check if discount row already exists
      let discountRow = summaryDetails.querySelector('.discount-row');
      if (!discountRow) {
        discountRow = document.createElement('div');
        discountRow.className = 'SummaryRow discount-row';
        discountRow.style.color = 'var(--success-green)';

        // Insert before the divider
        const divider = summaryDetails.querySelector('.SummaryDivider');
        summaryDetails.insertBefore(discountRow, divider);
      }

      let subtotal = 0;
      document.querySelectorAll('.CartItem').forEach((itemElement) => {
        const totalText = itemElement.querySelector('.ItemTotal .TotalPrice').textContent.replace(/[^\d.]/g, '');
        subtotal += parseFloat(totalText);
      });

      const discountAmount = subtotal * discountRate;

      discountRow.innerHTML = `
            <span>Discount:</span>
            <span>-Â£${discountAmount.toFixed(2)}</span>
        `;

      // Recalculate total
      const newSubtotal = subtotal - discountAmount;
      const vat = newSubtotal * 0.2;
      const total = newSubtotal + vat;

      // Update total
      const totalRow = summaryDetails.querySelector('.SummaryRow.total');
      if (totalRow) {
        totalRow.querySelector('span:last-child').textContent = `Â£${total.toFixed(2)}`;
      }
    }

    proceedToCheckout() {
      // Add loading state
      const checkoutBtn = document.querySelector('.CheckoutButton');
      const originalText = checkoutBtn.innerHTML;

      checkoutBtn.innerHTML = ';<i class="fas fa-spinner fa-spin"></i> Processing...';
      checkoutBtn.disabled = true;

      // Simulate checkout process
      setTimeout(() => {
        alert(
          'Redirecting to secure checkout...\n\nIn a real implementation, this would redirect to the Shopify checkout page.'
        );

        // Reset button
        checkoutBtn.innerHTML = originalText;
        checkoutBtn.disabled = false;
      }, 2000);
    }

    continueShopping() {
      alert('Redirecting to shop...\n\nIn a real implementation, this would redirect to the product catalog.');
    }

    addPulseAnimation(element) {
      element.classList.add('pulse');
      setTimeout(() => {
        element.classList.remove('pulse');
      }, 300);
    }

    addLoadAnimations() {
      const animatedElements = document.querySelectorAll('.CartItem, .SummaryCard, .TrustElements');
      animatedElements.forEach((element, index) => {
        setTimeout(() => {
          element.classList.add('fade-in');
        }, index * 100);
      });
    }

    updateCartDisplay() {
      // Initialize cart calculations
      this.updateCartCalculations();
    }
  }

  // Initialize cart when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CartManager();
  });

  // Add smooth scrolling for anchor links
  document.addEventListener('click', (e) => {
    if (e.target.matches('a[href^="#"]')) {
      e.preventDefault();
      const target = document.querySelector(e.target.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
        });
      }
    }
  });

  // Add keyboard navigation support
  document.addEventListener('keydown', (e) => {
    // ESC key to close any modals or reset states
    if (e.key === 'Escape') {
      const promoInput = document.querySelector('.PromoInput');
      if (promoInput && document.activeElement === promoInput) {
        promoInput.blur();
      }
    }

    // Enter key on quantity input
    if (e.key === 'Enter' && e.target.classList.contains('QuantityInput')) {
      e.target.blur();
    }
  });

  // Add accessibility improvements
  document.addEventListener('DOMContentLoaded', () => {
    // Add ARIA labels for screen readers
    const quantityInput = document.querySelector('.QuantityInput');
    if (quantityInput) {
      quantityInput.setAttribute('aria-label', 'Product quantity');
    }

    const promoInput = document.querySelector('.PromoInput');
    if (promoInput) {
      promoInput.setAttribute('aria-label', 'Promotional code');
    }

    // Add focus indicators for keyboard navigation
    const focusableElements = document.querySelectorAll('button, input, a');
    focusableElements.forEach((element) => {
      element.addEventListener('focus', () => {
        element.style.outline = '2px solid var(--pakistani-green)';
        element.style.outlineOffset = '2px';
      });

      element.addEventListener('blur', () => {
        element.style.outline = '';
        element.style.outlineOffset = '';
      });
    });
  });
</script>

{% schema %}
{
  "name": "t:general.cart",
  "settings": []
}
{% endschema %}

<style>
  /* Reset and Base Styles */
  * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    scroll-behavior: smooth;
  }

  :root {
    /* Brand Colors from PRD */
    --pakistani-green: #1c4219;
    --french-grey: #d0ccd0;
    --white: #fbfcff;
    --cerulean: #1c6e8c;
    --black: #000000;

    /* Additional Colors */
    --light-green: #e8f5e8;
    --success-green: #28a745;
    --warning-orange: #ffa500;
    --error-red: #dc3545;
    --border-light: #e5e5e5;
    --text-muted: #6c757d;
    --shadow-light: rgba(0, 0, 0, 0.1);
    --shadow-medium: rgba(0, 0, 0, 0.15);

    /* Typography */
    --font-futura: 'Futura', 'Arial', sans-serif;
    --font-elgian: 'Elgian', 'Georgia', serif;

    /* Spacing */
    --spacing-xs: 0.5rem;
    --spacing-sm: 1rem;
    --spacing-md: 1.5rem;
    --spacing-lg: 2rem;
    --spacing-xl: 3rem;

    /* Border Radius */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;

    /* Transitions */
    --transition-fast: 0.2s ease;
    --transition-medium: 0.3s ease;
  }

  body {
    font-family: var(--font-elgian);
    background-color: var(--white);
    color: var(--black);
    line-height: 1.6;
    font-size: 16px;
  }

  /* Container */
  .CartContainer {
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--spacing-md);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  /* Header Styles */
  .CartHeader {
    margin-bottom: var(--spacing-xl);
    padding-bottom: var(--spacing-lg);
    border-bottom: 2px solid var(--border-light);
  }

  .HeaderContent {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
  }

  .CartTitle {
    font-family: var(--font-futura);
    font-size: 2.5rem;
    font-weight: 600;
    color: var(--pakistani-green);
    margin: 0;
    line-height: 1.3;
  }

  .CartCount {
    font-size: 1.1rem;
    color: var(--text-muted);
  }

  .ItemCount {
    font-weight: 600;
    color: var(--pakistani-green);
  }

  /* Progress Indicator */
  .ProgressIndicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-sm);
  }

  .ProgressStep {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
    opacity: 0.5;
    transition: var(--transition-medium);
  }

  .ProgressStep.active {
    opacity: 1;
  }

  .StepNumber {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--border-light);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-family: var(--font-futura);
    transition: var(--transition-medium);
  }

  .ProgressStep.active .StepNumber {
    background-color: var(--pakistani-green);
    color: var(--white);
  }

  .ProgressStep span {
    font-size: 0.9rem;
    font-weight: 500;
  }

  .ProgressLine {
    width: 60px;
    height: 2px;
    background-color: var(--border-light);
  }

  /* Main Content */
  .CartMain {
    flex: 1;
    margin-bottom: var(--spacing-xl);
  }

  .CartContent {
    display: grid;
    grid-template-columns: 1fr 400px;
    gap: var(--spacing-xl);
  }

  /* Cart Items */
  .CartItems {
    background-color: var(--white);
  }

  .CartItem {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: var(--spacing-lg);
    padding: var(--spacing-lg);
    border: 1px solid var(--border-light);
    border-radius: var(--radius-lg);
    background-color: var(--white);
    box-shadow: 0 2px 8px var(--shadow-light);
    margin-bottom: var(--spacing-lg);
    transition: var(--transition-medium);
  }

  .CartItem:hover {
    box-shadow: 0 4px 16px var(--shadow-medium);
  }

  .ItemImage {
    position: relative;
    border-radius: var(--radius-md);
    overflow: hidden;
  }

  .ItemImage img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: var(--radius-md);
  }

  .StockBadge {
    position: absolute;
    top: var(--spacing-xs);
    right: var(--spacing-xs);
    background-color: var(--success-green);
    color: var(--white);
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    font-size: 0.8rem;
    font-weight: 600;
  }

  .ItemDetails {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .ItemHeader {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .ItemName {
    font-family: var(--font-futura);
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--pakistani-green);
    margin: 0;
    line-height: 1.3;
  }

  .RemoveButton {
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 1.2rem;
    cursor: pointer;
    padding: var(--spacing-xs);
    border-radius: var(--radius-sm);
    transition: var(--transition-fast);
  }

  .RemoveButton:hover {
    color: var(--error-red);
    background-color: rgba(220, 53, 69, 0.1);
  }

  .ItemDescription {
    color: var(--text-muted);
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .ItemFeatures {
    display: flex;
    gap: var(--spacing-md);
    flex-wrap: wrap;
  }

  .Feature {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.85rem;
    color: var(--pakistani-green);
    font-weight: 500;
  }

  .Feature i {
    font-size: 0.8rem;
  }

  .ItemActions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) 0;
    border-top: 1px solid var(--border-light);
    border-bottom: 1px solid var(--border-light);
  }

  .QuantityControls {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .QuantityLabel {
    font-weight: 600;
    color: var(--black);
  }

  .QuantitySelector {
    display: flex;
    align-items: center;
    border: 1px solid var(--border-light);
    border-radius: var(--radius-sm);
    overflow: hidden;
  }

  .QuantityButton {
    background-color: var(--white);
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    transition: var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
  }

  .QuantityButton:hover {
    background-color: var(--light-green);
    color: var(--pakistani-green);
  }

  .QuantityInput {
    border: none;
    width: 50px;
    text-align: center;
    padding: 0.5rem 0.25rem;
    font-size: 1rem;
    font-weight: 600;
  }

  .QuantityInput:focus {
    outline: none;
    background-color: var(--light-green);
  }

  .ItemPrice {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .PriceLabel {
    font-weight: 600;
    color: var(--black);
  }

  .Price {
    font-family: var(--font-futura);
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--pakistani-green);
  }

  .ItemTotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 600;
  }

  .TotalPrice {
    font-family: var(--font-futura);
    font-size: 1.3rem;
    color: var(--pakistani-green);
  }

  .ContinueShopping {
    margin-top: var(--spacing-lg);
  }

  .ContinueLink {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    color: var(--pakistani-green);
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition-fast);
  }

  .ContinueLink:hover {
    color: var(--cerulean);
    text-decoration: underline;
  }

  /* Cart Summary */
  .CartSummary {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-lg);
  }

  .SummaryCard {
    background-color: var(--white);
    border: 1px solid var(--border-light);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
    box-shadow: 0 2px 8px var(--shadow-light);
  }

  .SummaryTitle {
    font-family: var(--font-futura);
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--pakistani-green);
    margin-bottom: var(--spacing-md);
  }

  .SummaryDetails {
    margin-bottom: var(--spacing-lg);
  }

  .SummaryRow {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-xs) 0;
    font-size: 0.95rem;
  }

  .SummaryRow.total {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--pakistani-green);
    font-family: var(--font-futura);
  }

  .FreeDelivery {
    color: var(--success-green);
    font-weight: 600;
  }

  .SummaryDivider {
    height: 1px;
    background-color: var(--border-light);
    margin: var(--spacing-sm) 0;
  }

  .PromoCode {
    display: flex;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-lg);
  }

  .PromoInput {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid var(--border-light);
    border-radius: var(--radius-sm);
    font-size: 0.95rem;
  }

  .PromoInput:focus {
    outline: none;
    border-color: var(--pakistani-green);
    box-shadow: 0 0 0 2px rgba(28, 66, 25, 0.1);
  }

  .PromoButton {
    padding: 0.75rem 1rem;
    background-color: var(--pakistani-green);
    color: var(--white);
    border: none;
    border-radius: var(--radius-sm);
    font-weight: 600;
    cursor: pointer;
    transition: var(--transition-fast);
  }

  .PromoButton:hover {
    background-color: #0f2e0c;
  }

  .CheckoutButton {
    width: 100%;
    padding: 1rem;
    background-color: var(--pakistani-green);
    color: var(--white);
    border: none;
    border-radius: var(--radius-md);
    font-size: 1.1rem;
    font-weight: 600;
    font-family: var(--font-futura);
    cursor: pointer;
    transition: var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
  }

  .CheckoutButton:hover {
    background-color: #0f2e0c;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--shadow-medium);
  }

  .PaymentMethods {
    text-align: center;
  }

  .PaymentLabel {
    font-size: 0.9rem;
    color: var(--text-muted);
    display: block;
    margin-bottom: var(--spacing-xs);
  }

  .PaymentIcons {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
  }

  .PaymentIcons i {
    font-size: 1.5rem;
    color: var(--text-muted);
    transition: var(--transition-fast);
  }

  .PaymentIcons i:hover {
    color: var(--pakistani-green);
  }

  /* Trust Elements */
  .TrustElements {
    background-color: var(--light-green);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
  }

  .TrustItem {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
  }

  .TrustItem:last-child {
    margin-bottom: 0;
  }

  .TrustItem i {
    color: var(--pakistani-green);
    font-size: 1.2rem;
    margin-top: 0.2rem;
    flex-shrink: 0;
  }

  .TrustItem strong {
    display: block;
    font-weight: 600;
    color: var(--pakistani-green);
    margin-bottom: 0.25rem;
  }

  .TrustItem p {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin: 0;
    line-height: 1.4;
  }

  /* Footer */
  .CartFooter {
    border-top: 1px solid var(--border-light);
    padding-top: var(--spacing-lg);
    margin-top: auto;
  }

  .FooterContent {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9rem;
    color: var(--text-muted);
  }

  .FooterLinks {
    display: flex;
    gap: var(--spacing-md);
  }

  .FooterLinks a {
    color: var(--text-muted);
    text-decoration: none;
    transition: var(--transition-fast);
  }

  .FooterLinks a:hover {
    color: var(--pakistani-green);
    text-decoration: underline;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .CartContainer {
      padding: var(--spacing-sm);
    }

    .CartTitle {
      font-size: 2rem;
    }

    .HeaderContent {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-sm);
    }

    .ProgressIndicator {
      flex-wrap: wrap;
      gap: var(--spacing-xs);
    }

    .ProgressStep span {
      font-size: 0.8rem;
    }

    .CartContent {
      grid-template-columns: 1fr;
      gap: var(--spacing-lg);
    }

    .CartItem {
      grid-template-columns: 1fr;
      gap: var(--spacing-md);
    }

    .ItemImage {
      max-width: 300px;
      margin: 0 auto;
    }

    .ItemActions {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-sm);
    }

    .FooterContent {
      flex-direction: column;
      gap: var(--spacing-sm);
      text-align: center;
    }
  }

  @media (max-width: 480px) {
    .CartTitle {
      font-size: 1.5rem;
    }

    .ItemName {
      font-size: 1.2rem;
    }

    .QuantityControls {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-xs);
    }

    .PromoCode {
      flex-direction: column;
    }

    .TrustItem {
      flex-direction: column;
      text-align: center;
      gap: var(--spacing-xs);
    }
  }

  /* Animation Classes */
  .fade-in {
    animation: fadeIn 0.5s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .pulse {
    animation: pulse 0.3s ease-in-out;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }
</style>

<script>
  // Cart functionality and interactions
  class CartManager {
    constructor() {
      this.initializeEventListeners();
      this.updateCartDisplay();
    }

    initializeEventListeners() {
      // Quantity controls
      document.querySelectorAll('.QuantityButton.decrease').forEach((button) => {
        button.addEventListener('click', (e) => this.decreaseQuantity(e.target.dataset.line));
      });
      document.querySelectorAll('.QuantityButton.increase').forEach((button) => {
        button.addEventListener('click', (e) => this.increaseQuantity(e.target.dataset.line));
      });
      document.querySelectorAll('.QuantityInput').forEach((input) => {
        input.addEventListener('change', (e) => this.updateQuantity(e.target.value, e.target.dataset.line));
        input.addEventListener('input', (e) => this.validateQuantityInput(e));
      });

      // Remove item button
      document.querySelectorAll('.RemoveButton').forEach((button) => {
        button.addEventListener('click', (e) => this.removeItem(e.target.dataset.line));
      });

      // Promo code functionality
      const promoBtn = document.querySelector('.PromoButton');
      const promoInput = document.querySelector('.PromoInput');

      if (promoBtn) {
        promoBtn.addEventListener('click', () => this.applyPromoCode());
      }

      if (promoInput) {
        promoInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.applyPromoCode();
          }
        });
      }

      // Checkout button
      const checkoutBtn = document.querySelector('.CheckoutButton');
      if (checkoutBtn) {
        checkoutBtn.addEventListener('click', () => this.proceedToCheckout());
      }

      // Continue shopping link
      const continueLink = document.querySelector('.ContinueLink');
      if (continueLink) {
        continueLink.addEventListener('click', (e) => {
          e.preventDefault();
          this.continueShopping();
        });
      }

      // Add animation classes on load
      this.addLoadAnimations();
    }

    decreaseQuantity(line) {
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const currentValue = parseInt(quantityInput.value);

      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
        this.updateCartItem(line, quantityInput.value);
        this.addPulseAnimation(quantityInput);
      }
    }

    increaseQuantity(line) {
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const currentValue = parseInt(quantityInput.value);
      const maxValue = parseInt(quantityInput.max) || 10; // Assuming max 10 for demo

      if (currentValue < maxValue) {
        quantityInput.value = currentValue + 1;
        this.updateCartItem(line, quantityInput.value);
        this.addPulseAnimation(quantityInput);
      }
    }

    updateQuantity(value, line) {
      const quantity = parseInt(value);
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const minValue = parseInt(quantityInput.min) || 1;
      const maxValue = parseInt(quantityInput.max) || 10;

      if (quantity >= minValue && quantity <= maxValue) {
        this.updateCartItem(line, quantity);
      } else {
        // Reset to valid value
        quantityInput.value = Math.max(minValue, Math.min(maxValue, quantity));
        this.updateCartItem(line, quantityInput.value);
      }
    }

    validateQuantityInput(e) {
      // Only allow numbers
      const value = e.target.value;
      if (!/^\d*$/.test(value)) {
        e.target.value = value.replace(/\D/g, '');
      }
    }

    updateCartItem(line, quantity) {
      // This function would typically make an AJAX call to update the cart in Shopify
      // For this demo, we'll just update the display
      console.log(`Updating item ${line} to quantity ${quantity}`);

      // Simulate price update (replace with actual Liquid item.price and item.line_price)
      const itemElement = document.querySelector(`.CartItem[data-line="${line}"]`);
      if (itemElement) {
        const priceElement = itemElement.querySelector('.ItemPrice .Price');
        const totalElement = itemElement.querySelector('.ItemTotal .TotalPrice');

        // Assuming price is available in a data attribute or parsed from text
        const itemPriceText = priceElement.textContent.replace(/[^\d.]/g, '');
        const itemPrice = parseFloat(itemPriceText);

        const newLinePrice = itemPrice * quantity;
        totalElement.textContent = `Â£${newLinePrice.toFixed(2)}`;
      }
      this.updateCartCalculations();
    }

    updateCartCalculations() {
      // This function would typically get cart data from Shopify Liquid objects
      // For this demo, we'll sum up visible item totals
      let subtotal = 0;
      document.querySelectorAll('.CartItem').forEach((itemElement) => {
        const totalText = itemElement.querySelector('.ItemTotal .TotalPrice').textContent.replace(/[^\d.]/g, '');
        subtotal += parseFloat(totalText);
      });

      const vat = subtotal * 0.2; // 20% VAT
      let total = subtotal + vat;

      // Apply promo code if active (for demo purposes)
      const discountRow = document.querySelector('.SummaryRow.discount-row');
      if (discountRow) {
        const discountText = discountRow.querySelector('span:last-child').textContent.replace(/[^\d.]/g, '');
        total -= parseFloat(discountText);
      }

      // Update summary display
      const summaryRows = document.querySelectorAll('.SummaryRow');
      summaryRows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        if (text.includes('subtotal')) {
          row.querySelector('span:last-child').textContent = `Â£${subtotal.toFixed(2)}`;
        } else if (text.includes('vat')) {
          row.querySelector('span:last-child').textContent = `Â£${vat.toFixed(2)}`;
        } else if (text.includes('total')) {
          row.querySelector('span:last-child').textContent = `Â£${total.toFixed(2)}`;
        }
      });

      // Update cart count
      let totalItems = 0;
      document.querySelectorAll('.QuantityInput').forEach((input) => {
        totalItems += parseInt(input.value);
      });

      const cartCount = document.querySelector('.ItemCount');
      if (cartCount) {
        cartCount.textContent = totalItems;
      }

      const cartCountText = document.querySelector('.CartCount');
      if (cartCountText) {
        cartCountText.innerHTML = `<span class=\"ItemCount\">${totalItems}</span> ${
          totalItems === 1 ? 'item' : 'items'
        } in your cart`;
      }
    }

    removeItem(line) {
      if (confirm('Are you sure you want to remove this item from your cart?')) {
        const cartItem = document.querySelector(`.CartItem[data-line="${line}"]`);
        if (cartItem) {
          cartItem.style.transition = 'all 0.3s ease';
          cartItem.style.transform = 'translateX(-100%)';
          cartItem.style.opacity = '0';

          setTimeout(() => {
            cartItem.remove();
            this.updateCartCalculations();
            if (document.querySelectorAll('.CartItem').length === 0) {
              this.showEmptyCart();
            }
          }, 300);
        }
      }
    }

    showEmptyCart() {
      const cartItems = document.querySelector('.CartItems');
      if (cartItems) {
        cartItems.innerHTML = `
                <div class="EmptyCart" style="text-align: center; padding: 3rem; color: var(--text-muted);">
                    <i class="fas fa-shopping-cart" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                    <h3 style="margin-bottom: 1rem; color: var(--pakistani-green);">Your cart is empty</h3>
                    <p style="margin-bottom: 2rem;">Discover our beautiful handmade rattan furniture collection</p>
                    <a href="/collections/all" class="ContinueLink" style="display: inline-flex; align-items: center; gap: 0.5rem; color: var(--pakistani-green); text-decoration: none; font-weight: 600; padding: 1rem 2rem; border: 2px solid var(--pakistani-green); border-radius: 8px; transition: all 0.3s ease;">
                        <i class="fas fa-arrow-left"></i>
                        Start Shopping
                    </a>
                </div>
            `;
      }

      // Update cart count
      const cartCount = document.querySelector('.ItemCount');
      if (cartCount) {
        cartCount.textContent = '0';
      }

      const cartCountText = document.querySelector('.CartCount');
      if (cartCountText) {
        cartCountText.innerHTML = '<span class="ItemCount">0</span> items in your cart';
      }

      // Hide summary or show empty state
      const summaryCard = document.querySelector('.SummaryCard');
      if (summaryCard) {
        summaryCard.style.opacity = '0.5';
        summaryCard.style.pointerEvents = 'none';
      }
    }

    applyPromoCode() {
      const promoInput = document.querySelector('.PromoInput');
      const promoCode = promoInput.value.trim().toUpperCase();

      // Simulate promo code validation
      const validCodes = {
        WELCOME10: 0.1,
        SUMMER20: 0.2,
        GARDEN15: 0.15,
      };

      if (validCodes[promoCode]) {
        const discount = validCodes[promoCode];
        this.showPromoSuccess(promoCode, discount);
        this.applyDiscount(discount);
      } else if (promoCode) {
        this.showPromoError();
      }
    }

    showPromoSuccess(code, discount) {
      const promoCode = document.querySelector('.PromoCode');
      const successMessage = document.createElement('div');
      successMessage.className = 'PromoSuccess';
      successMessage.style.cssText = `
            background-color: var(--success-green);
            color: white;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            margin-top: 0.5rem;
            font-size: 0.9rem;
            text-align: center;
        `;
      successMessage.textContent = `${code} applied! ${Math.round(discount * 100)}% discount`;

      // Remove any existing messages
      const existingMessage = promoCode.querySelector('.PromoSuccess, .PromoError');
      if (existingMessage) {
        existingMessage.remove();
      }

      promoCode.appendChild(successMessage);

      // Remove message after 3 seconds
      setTimeout(() => {
        if (successMessage.parentNode) {
          successMessage.remove();
        }
      }, 3000);
    }

    showPromoError() {
      const promoCode = document.querySelector('.PromoCode');
      const errorMessage = document.createElement('div');
      errorMessage.className = 'PromoError';
      errorMessage.style.cssText = `
            background-color: var(--error-red);
            color: white;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            margin-top: 0.5rem;
            font-size: 0.9rem;
            text-align: center;
        `;
      errorMessage.textContent = 'Invalid promo code. Please try again.';

      // Remove any existing messages
      const existingMessage = promoCode.querySelector('.PromoSuccess, .PromoError');
      if (existingMessage) {
        existingMessage.remove();
      }

      promoCode.appendChild(errorMessage);

      // Remove message after 3 seconds
      setTimeout(() => {
        if (errorMessage.parentNode) {
          errorMessage.remove();
        }
      }, 3000);
    }

    applyDiscount(discountRate) {
      // This would integrate with the actual cart system
      // For demo purposes, we'll just show the discount in the summary
      const summaryDetails = document.querySelector('.SummaryDetails');

      // Check if discount row already exists
      let discountRow = summaryDetails.querySelector('.discount-row');
      if (!discountRow) {
        discountRow = document.createElement('div');
        discountRow.className = 'SummaryRow discount-row';
        discountRow.style.color = 'var(--success-green)';

        // Insert before the divider
        const divider = summaryDetails.querySelector('.SummaryDivider');
        summaryDetails.insertBefore(discountRow, divider);
      }

      let subtotal = 0;
      document.querySelectorAll('.CartItem').forEach((itemElement) => {
        const totalText = itemElement.querySelector('.ItemTotal .TotalPrice').textContent.replace(/[^\d.]/g, '');
        subtotal += parseFloat(totalText);
      });

      const discountAmount = subtotal * discountRate;

      discountRow.innerHTML = `
            <span>Discount:</span>
            <span>-Â£${discountAmount.toFixed(2)}</span>
        `;

      // Recalculate total
      const newSubtotal = subtotal - discountAmount;
      const vat = newSubtotal * 0.2;
      const total = newSubtotal + vat;

      // Update total
      const totalRow = summaryDetails.querySelector('.SummaryRow.total');
      if (totalRow) {
        totalRow.querySelector('span:last-child').textContent = `Â£${total.toFixed(2)}`;
      }
    }

    proceedToCheckout() {
      // Add loading state
      const checkoutBtn = document.querySelector('.CheckoutButton');
      const originalText = checkoutBtn.innerHTML;

      checkoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
      checkoutBtn.disabled = true;

      // Simulate checkout process
      setTimeout(() => {
        alert(
          'Redirecting to secure checkout...\n\nIn a real implementation, this would redirect to the Shopify checkout page.'
        );

        // Reset button
        checkoutBtn.innerHTML = originalText;
        checkoutBtn.disabled = false;
      }, 2000);
    }

    continueShopping() {
      alert('Redirecting to shop...\n\nIn a real implementation, this would redirect to the product catalog.');
    }

    addPulseAnimation(element) {
      element.classList.add('pulse');
      setTimeout(() => {
        element.classList.remove('pulse');
      }, 300);
    }

    addLoadAnimations() {
      const animatedElements = document.querySelectorAll('.CartItem, .SummaryCard, .TrustElements');
      animatedElements.forEach((element, index) => {
        setTimeout(() => {
          element.classList.add('fade-in');
        }, index * 100);
      });
    }

    updateCartDisplay() {
      // Initialize cart calculations
      this.updateCartCalculations();
    }
  }

  // Initialize cart when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CartManager();
  });

  // Add smooth scrolling for anchor links
  document.addEventListener('click', (e) => {
    if (e.target.matches('a[href^="#"]')) {
      e.preventDefault();
      const target = document.querySelector(e.target.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
        });
      }
    }
  });

  // Add keyboard navigation support
  document.addEventListener('keydown', (e) => {
    // ESC key to close any modals or reset states
    if (e.key === 'Escape') {
      const promoInput = document.querySelector('.PromoInput');
      if (promoInput && document.activeElement === promoInput) {
        promoInput.blur();
      }
    }

    // Enter key on quantity input
    if (e.key === 'Enter' && e.target.classList.contains('QuantityInput')) {
      e.target.blur();
    }
  });

  // Add accessibility improvements
  document.addEventListener('DOMContentLoaded', () => {
    // Add ARIA labels for screen readers
    const quantityInput = document.querySelector('.QuantityInput');
    if (quantityInput) {
      quantityInput.setAttribute('aria-label', 'Product quantity');
    }

    const promoInput = document.querySelector('.PromoInput');
    if (promoInput) {
      promoInput.setAttribute('aria-label', 'Promotional code');
    }

    // Add focus indicators for keyboard navigation
    const focusableElements = document.querySelectorAll('button, input, a');
    focusableElements.forEach((element) => {
      element.addEventListener('focus', () => {
        element.style.outline = '2px solid var(--pakistani-green)';
        element.style.outlineOffset = '2px';
      });

      element.addEventListener('blur', () => {
        element.style.outline = '';
        element.style.outlineOffset = '';
      });
    });
  });
</script>

<script>
  // Cart functionality and interactions
  class CartManager {
    constructor() {
      this.initializeEventListeners();
      this.updateCartDisplay();
    }

    initializeEventListeners() {
      // Quantity controls
      document.querySelectorAll('.QuantityButton.decrease').forEach((button) => {
        button.addEventListener('click', (e) => this.decreaseQuantity(e.target.dataset.line));
      });
      document.querySelectorAll('.QuantityButton.increase').forEach((button) => {
        button.addEventListener('click', (e) => this.increaseQuantity(e.target.dataset.line));
      });
      document.querySelectorAll('.QuantityInput').forEach((input) => {
        input.addEventListener('change', (e) => this.updateQuantity(e.target.value, e.target.dataset.line));
        input.addEventListener('input', (e) => this.validateQuantityInput(e));
      });

      // Remove item button
      document.querySelectorAll('.RemoveButton').forEach((button) => {
        button.addEventListener('click', (e) => this.removeItem(e.target.dataset.line));
      });

      // Promo code functionality
      const promoBtn = document.querySelector('.PromoButton');
      const promoInput = document.querySelector('.PromoInput');

      if (promoBtn) {
        promoBtn.addEventListener('click', () => this.applyPromoCode());
      }

      if (promoInput) {
        promoInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.applyPromoCode();
          }
        });
      }

      // Checkout button
      const checkoutBtn = document.querySelector('.CheckoutButton');
      if (checkoutBtn) {
        checkoutBtn.addEventListener('click', () => this.proceedToCheckout());
      }

      // Continue shopping link
      const continueLink = document.querySelector('.ContinueLink');
      if (continueLink) {
        continueLink.addEventListener('click', (e) => {
          e.preventDefault();
          this.continueShopping();
        });
      }

      // Add animation classes on load
      this.addLoadAnimations();
    }

    decreaseQuantity(line) {
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const currentValue = parseInt(quantityInput.value);

      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
        this.updateCartItem(line, quantityInput.value);
        this.addPulseAnimation(quantityInput);
      }
    }

    increaseQuantity(line) {
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const currentValue = parseInt(quantityInput.value);
      const maxValue = parseInt(quantityInput.max) || 10; // Assuming max 10 for demo

      if (currentValue < maxValue) {
        quantityInput.value = currentValue + 1;
        this.updateCartItem(line, quantityInput.value);
        this.addPulseAnimation(quantityInput);
      }
    }

    updateQuantity(value, line) {
      const quantity = parseInt(value);
      const quantityInput = document.querySelector(`.QuantityInput[data-line="${line}"]`);
      const minValue = parseInt(quantityInput.min) || 1;
      const maxValue = parseInt(quantityInput.max) || 10;

      if (quantity >= minValue && quantity <= maxValue) {
        this.updateCartItem(line, quantity);
      } else {
        // Reset to valid value
        quantityInput.value = Math.max(minValue, Math.min(maxValue, quantity));
        this.updateCartItem(line, quantityInput.value);
      }
    }

    validateQuantityInput(e) {
      // Only allow numbers
      const value = e.target.value;
      if (!/^\d*$/.test(value)) {
        e.target.value = value.replace(/\D/g, '');
      }
    }

    updateCartItem(line, quantity) {
      // This function would typically make an AJAX call to update the cart in Shopify
      // For this demo, we\'ll just update the display
      console.log(`Updating item ${line} to quantity ${quantity}`);

      // Simulate price update (replace with actual Liquid item.price and item.line_price)
      const itemElement = document.querySelector(`.CartItem[data-line="${line}"]`);
      if (itemElement) {
        const priceElement = itemElement.querySelector('.ItemPrice .Price');
        const totalElement = itemElement.querySelector('.ItemTotal .TotalPrice');

        // Assuming price is available in a data attribute or parsed from text
        const itemPriceText = priceElement.textContent.replace(/[^\d.]/g, '');
        const itemPrice = parseFloat(itemPriceText);

        const newLinePrice = itemPrice * quantity;
        totalElement.textContent = `Â£${newLinePrice.toFixed(2)}`;
      }
      this.updateCartCalculations();
    }

    updateCartCalculations() {
      // This function would typically get cart data from Shopify Liquid objects
      // For this demo, we\'ll sum up visible item totals
      let subtotal = 0;
      document.querySelectorAll('.CartItem').forEach((itemElement) => {
        const totalText = itemElement.querySelector('.ItemTotal .TotalPrice').textContent.replace(/[^\d.]/g, '');
        subtotal += parseFloat(totalText);
      });

      const vat = subtotal * 0.2; // 20% VAT
      let total = subtotal + vat;

      // Apply promo code if active (for demo purposes)
      const discountRow = document.querySelector('.SummaryRow.discount-row');
      if (discountRow) {
        const discountText = discountRow.querySelector('span:last-child').textContent.replace(/[^\d.]/g, '');
        total -= parseFloat(discountText);
      }

      // Update summary display
      const summaryRows = document.querySelectorAll('.SummaryRow');
      summaryRows.forEach((row) => {
        const text = row.textContent.toLowerCase();
        if (text.includes('subtotal')) {
          row.querySelector('span:last-child').textContent = `Â£${subtotal.toFixed(2)}`;
        } else if (text.includes('vat')) {
          row.querySelector('span:last-child').textContent = `Â£${vat.toFixed(2)}`;
        } else if (text.includes('total')) {
          row.querySelector('span:last-child').textContent = `Â£${total.toFixed(2)}`;
        }
      });

      // Update cart count
      let totalItems = 0;
      document.querySelectorAll('.QuantityInput').forEach((input) => {
        totalItems += parseInt(input.value);
      });

      const cartCount = document.querySelector('.ItemCount');
      if (cartCount) {
        cartCount.textContent = totalItems;
      }

      const cartCountText = document.querySelector('.CartCount');
      if (cartCountText) {
        cartCountText.innerHTML = `<span class=\"ItemCount\">${totalItems}</span> ${
          totalItems === 1 ? 'item' : 'items'
        } in your cart`;
      }
    }

    removeItem(line) {
      if (confirm('Are you sure you want to remove this item from your cart?')) {
        const cartItem = document.querySelector(`.CartItem[data-line="${line}"]`);
        if (cartItem) {
          cartItem.style.transition = 'all 0.3s ease';
          cartItem.style.transform = 'translateX(-100%)';
          cartItem.style.opacity = '0';

          setTimeout(() => {
            cartItem.remove();
            this.updateCartCalculations();
            if (document.querySelectorAll('.CartItem').length === 0) {
              this.showEmptyCart();
            }
          }, 300);
        }
      }
    }

    showEmptyCart() {
      const cartItems = document.querySelector('.CartItems');
      if (cartItems) {
        cartItems.innerHTML = `
                <div class="EmptyCart" style="text-align: center; padding: 3rem; color: var(--text-muted);">
                    <i class="fas fa-shopping-cart" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                    <h3 style="margin-bottom: 1rem; color: var(--pakistani-green);">Your cart is empty</h3>
                    <p style="margin-bottom: 2rem;">Discover our beautiful handmade rattan furniture collection</p>
                    <a href="/collections/all" class="ContinueLink" style="display: inline-flex; align-items: center; gap: 0.5rem; color: var(--pakistani-green); text-decoration: none; font-weight: 600; padding: 1rem 2rem; border: 2px solid var(--pakistani-green); border-radius: 8px; transition: all 0.3s ease;">
                        <i class="fas fa-arrow-left"></i>
                        Start Shopping
                    </a>
                </div>
            `;
      }

      // Update cart count
      const cartCount = document.querySelector('.ItemCount');
      if (cartCount) {
        cartCount.textContent = '0';
      }

      const cartCountText = document.querySelector('.CartCount');
      if (cartCountText) {
        cartCountText.innerHTML = '<span class="ItemCount">0</span> items in your cart';
      }

      // Hide summary or show empty state
      const summaryCard = document.querySelector('.SummaryCard');
      if (summaryCard) {
        summaryCard.style.opacity = '0.5';
        summaryCard.style.pointerEvents = 'none';
      }
    }

    applyPromoCode() {
      const promoInput = document.querySelector('.PromoInput');
      const promoCode = promoInput.value.trim().toUpperCase();

      // Simulate promo code validation
      const validCodes = {
        WELCOME10: 0.1,
        SUMMER20: 0.2,
        GARDEN15: 0.15,
      };

      if (validCodes[promoCode]) {
        const discount = validCodes[promoCode];
        this.showPromoSuccess(promoCode, discount);
        this.applyDiscount(discount);
      } else if (promoCode) {
        this.showPromoError();
      }
    }

    showPromoSuccess(code, discount) {
      const promoCode = document.querySelector('.PromoCode');
      const successMessage = document.createElement('div');
      successMessage.className = 'PromoSuccess';
      successMessage.style.cssText = `
            background-color: var(--success-green);
            color: white;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            margin-top: 0.5rem;
            font-size: 0.9rem;
            text-align: center;
        `;
      successMessage.textContent = `${code} applied! ${Math.round(discount * 100)}% discount`;

      // Remove any existing messages
      const existingMessage = promoCode.querySelector('.PromoSuccess, .PromoError');
      if (existingMessage) {
        existingMessage.remove();
      }

      promoCode.appendChild(successMessage);

      // Remove message after 3 seconds
      setTimeout(() => {
        if (successMessage.parentNode) {
          successMessage.remove();
        }
      }, 3000);
    }

    showPromoError() {
      const promoCode = document.querySelector('.PromoCode');
      const errorMessage = document.createElement('div');
      errorMessage.className = 'PromoError';
      errorMessage.style.cssText = `
            background-color: var(--error-red);
            color: white;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            margin-top: 0.5rem;
            font-size: 0.9rem;
            text-align: center;
        `;
      errorMessage.textContent = 'Invalid promo code. Please try again.';

      // Remove any existing messages
      const existingMessage = promoCode.querySelector('.PromoSuccess, .PromoError');
      if (existingMessage) {
        existingMessage.remove();
      }

      promoCode.appendChild(errorMessage);

      // Remove message after 3 seconds
      setTimeout(() => {
        if (errorMessage.parentNode) {
          errorMessage.remove();
        }
      }, 3000);
    }

    applyDiscount(discountRate) {
      // This would integrate with the actual cart system
      // For demo purposes, we\'ll just show the discount in the summary
      const summaryDetails = document.querySelector('.SummaryDetails');

      // Check if discount row already exists
      let discountRow = summaryDetails.querySelector('.discount-row');
      if (!discountRow) {
        discountRow = document.createElement('div');
        discountRow.className = 'SummaryRow discount-row';
        discountRow.style.color = 'var(--success-green)';

        // Insert before the divider
        const divider = summaryDetails.querySelector('.SummaryDivider');
        summaryDetails.insertBefore(discountRow, divider);
      }

      let subtotal = 0;
      document.querySelectorAll('.CartItem').forEach((itemElement) => {
        const totalText = itemElement.querySelector('.ItemTotal .TotalPrice').textContent.replace(/[^\d.]/g, '');
        subtotal += parseFloat(totalText);
      });

      const discountAmount = subtotal * discountRate;

      discountRow.innerHTML = `
            <span>Discount:</span>
            <span>-Â£${discountAmount.toFixed(2)}</span>
        `;

      // Recalculate total
      const newSubtotal = subtotal - discountAmount;
      const vat = newSubtotal * 0.2;
      const total = newSubtotal + vat;

      // Update total
      const totalRow = summaryDetails.querySelector('.SummaryRow.total');
      if (totalRow) {
        totalRow.querySelector('span:last-child').textContent = `Â£${total.toFixed(2)}`;
      }
    }

    proceedToCheckout() {
      // Add loading state
      const checkoutBtn = document.querySelector('.CheckoutButton');
      const originalText = checkoutBtn.innerHTML;

      checkoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
      checkoutBtn.disabled = true;

      // Simulate checkout process
      setTimeout(() => {
        alert(
          'Redirecting to secure checkout...\n\nIn a real implementation, this would redirect to the Shopify checkout page.'
        );

        // Reset button
        checkoutBtn.innerHTML = originalText;
        checkoutBtn.disabled = false;
      }, 2000);
    }

    continueShopping() {
      alert('Redirecting to shop...\n\nIn a real implementation, this would redirect to the product catalog.');
    }

    addPulseAnimation(element) {
      element.classList.add('pulse');
      setTimeout(() => {
        element.classList.remove('pulse');
      }, 300);
    }

    addLoadAnimations() {
      const animatedElements = document.querySelectorAll('.CartItem, .SummaryCard, .TrustElements');
      animatedElements.forEach((element, index) => {
        setTimeout(() => {
          element.classList.add('fade-in');
        }, index * 100);
      });
    }

    updateCartDisplay() {
      // Initialize cart calculations
      this.updateCartCalculations();
    }
  }

  // Initialize cart when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CartManager();
  });

  // Add smooth scrolling for anchor links
  document.addEventListener('click', (e) => {
    if (e.target.matches('a[href^="#"]')) {
      e.preventDefault();
      const target = document.querySelector(e.target.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
        });
      }
    }
  });

  // Add keyboard navigation support
  document.addEventListener('keydown', (e) => {
    // ESC key to close any modals or reset states
    if (e.key === 'Escape') {
      const promoInput = document.querySelector('.PromoInput');
      if (promoInput && document.activeElement === promoInput) {
        promoInput.blur();
      }
    }

    // Enter key on quantity input
    if (e.key === 'Enter' && e.target.classList.contains('QuantityInput')) {
      e.target.blur();
    }
  });

  // Add accessibility improvements
  document.addEventListener('DOMContentLoaded', () => {
    // Add ARIA labels for screen readers
    const quantityInput = document.querySelector('.QuantityInput');
    if (quantityInput) {
      quantityInput.setAttribute('aria-label', 'Product quantity');
    }

    const promoInput = document.querySelector('.PromoInput');
    if (promoInput) {
      promoInput.setAttribute('aria-label', 'Promotional code');
    }

    // Add focus indicators for keyboard navigation
    const focusableElements = document.querySelectorAll('button, input, a');
    focusableElements.forEach((element) => {
      element.addEventListener('focus', () => {
        element.style.outline = '2px solid var(--pakistani-green)';
        element.style.outlineOffset = '2px';
      });

      element.addEventListener('blur', () => {
        element.style.outline = '';
        element.style.outlineOffset = '';
      });
    });
  });
</script>
